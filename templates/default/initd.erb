#! /bin/bash

# GITLAB CI
# Maintainer: @randx
# App Version: 2.2

### BEGIN INIT INFO
# Provides:          gitlab-ci
# Required-Start:    $local_fs $remote_fs $network $syslog redis-server
# Required-Stop:     $local_fs $remote_fs $network $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: GitLab CI
# Description:       GitLab CI
### END INIT INFO

APP_USER="<%= @user %>"
APP_ROOT="<%= @path %>"
APP_ROOT="/home/$APP_USER/gitlab-ci"
DAEMON_OPTS="-C $APP_ROOT/config/puma.rb -e production"
SOCKET_PATH="$APP_ROOT/tmp/sockets"
SOCKET_FILE="$SOCKET_PATH/gitlab-ci.socket"
PID_PATH="$APP_ROOT/tmp/pids"
WEB_SERVER_PID="$PID_PATH/puma.pid"
SIDEKIQ_PID="$PID_PATH/sidekiq.pid"
STOP_SIDEKIQ="RAILS_ENV=production script/background_jobs stop"
START_SIDEKIQ="RAILS_ENV=production script/background_jobs start"
NAME="GitLab CI"
DESC="Gitlab CI service"

# This is better than running sudo... CentOS 6.4 forward has RequireTTY enabled in the sudoers configuration -- @bdwyertech
if [ `id -un` != "$APP_USER" ]; then
  exec su - "$APP_USER" -- $0 "$@"
fi

check_pid(){
  if [ -f $WEB_SERVER_PID ]; then
    PID=`cat $WEB_SERVER_PID`
    SPID=`cat $SIDEKIQ_PID`
    STATUS=`ps aux | grep $PID | grep -v grep | wc -l`
  else
    STATUS=0
    PID=0
  fi
}

start() {
  cd $APP_ROOT
  check_pid
  if [ "$PID" -ne 0 -a "$STATUS" -ne 0 ]; then
    # Program is running, exit with error code 1.
    echo "Error! $DESC is currently running!"
    exit 1
  else
      ! [ -e $SOCKET_FILE ] || bash -l -c  "rm $SOCKET_FILE"
      bash -l -c "RAILS_ENV=production bundle exec puma $DAEMON_OPTS"
      bash -l -c "mkdir -p $PID_PATH && $START_SIDEKIQ"
      echo "$DESC started"
  fi
}

stop() {
  cd $APP_ROOT
  check_pid
  if [ "$PID" -ne 0 -a "$STATUS" -ne 0 ]; then
    ## Program is running, stop it.
    kill -QUIT `cat $WEB_SERVER_PID`
    bash -l -c "mkdir -p $PID_PATH && $STOP_SIDEKIQ"
    echo "$DESC stopped"
  else
    ## Program is not running, exit with error.
    echo "Error! $DESC not started!"
    exit 1
  fi
}

restart() {
  cd $APP_ROOT
  check_pid
  if [ "$PID" -ne 0 -a "$STATUS" -ne 0 ]; then
    echo "Restarting $DESC..."
    stop
    start
    echo "$DESC restarted."
  else
    echo "Error, $NAME not running!"
    start
  fi
}

status() {
  cd $APP_ROOT
  check_pid
  if [ "$PID" -ne 0 -a "$STATUS" -ne 0 ]; then
    echo "$DESC / Unicorn with PID $PID is running."
    echo "$DESC / Sidekiq with PID $SPID is running."
  else
    echo "$DESC is not running."
    exit 1
  fi
}

case "$1" in
  start)
        start
        ;;
  stop)
        stop
        ;;
  restart)
        restart
        ;;
  status)
        status
        ;;
  *)
        echo "Usage: sudo service gitlab_ci {start|stop|restart|status}" >&2
        exit 1
        ;;
esac

exit 0